(追加で仮定した仕様/制約)
    TLLIのget_a,get_b,get_cに不正なidを渡した場合の返り値は0とする
    TLLIシミュレータでは実行が終わればTriany Memoryの内容はクリアされる
    TLLIシミュレータでallocateできるTrianyは1,000,000個を上限とする(上限を超えるallocateには0を返す)

TLLI
    内部仕様
        データ構造
            Trianyとして割り当てる領域をスタックで管理している. 
              (理由:削除の必要が無いため, 定数時間でアロケーションを行えるメリットを考慮してスタックを選択した. )
            ただしallocate_triany()で返るidが連番になるとシミュレータとして適切ではないので, 
            スタックの最大サイズを法とする逆元を利用してidを分散させた. 

    外部仕様
        インターフェース
            Triany Technical Documentに準じる
            
        計算量
            アロケート・参照・更新いずれもO(1)

DICTI
    内部仕様
        データ構造
            平衡探索木としてTreap(http://en.wikipedia.org/wiki/Treap)を用いた.
              (理由: 2次記憶であるTrianyに対する読み書きを最小限にするため, 
                     少ないデータで1つのノードを表現できる平衡探索木の中から実装が平易なTreapを選択した.)

        Trianyに保存するデータのレイアウト
            2つのTrianyを以下のようにペアで用いることで, Treap内の1つのノード情報を保存している. 
            +-----+-------+---------------------------+     +------------+-------------+----------+
            | key | value | link to the paired Triany ----> | left child | right child | priority |
            +-----+-------+---------------------------+     +------------+-------------+----------+
            ただし, root_trianyのみ以下のように木の根を指す用途で用いる
            +------------------+--------+--------+
            | tree's root node | unused | unused |
            +------------------+--------+--------+

        内部クラス
            Node:
                Treap内のノードを表現するクラス.
                Trianyへのアクセス方法を隠蔽し, Treapのアルゴリズムで用いるインターフェースを公開する.
            Treap: 
                Nodeを操作することでTreapのアルゴリズムを実装するクラス

    外部仕様
        インターフェース
            Triany Technical Documentに準じる

        計算量
            挿入・参照ともにO(log n) (nは挿入済みのエントリ数)

        スレッド安全性
            スレッドセーフでない.
            set_entry()とfind_entry()が衝突した場合、find_entry()が正しい結果を返さない場合がある
            set_entry()同士が衝突した場合、それ以降二分探索木の条件を満たさず正しい結果が得られなくなる可能性がある

C++による実装
　  使用法：
        標準入力からtestdata.txtを入力する
        g++ main.cpp && ./a.out < testdata.txt
